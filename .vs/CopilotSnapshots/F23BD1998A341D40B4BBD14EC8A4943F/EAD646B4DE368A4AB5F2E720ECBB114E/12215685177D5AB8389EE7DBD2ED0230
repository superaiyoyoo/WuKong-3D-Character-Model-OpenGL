#include <Windows.h>
#include <gl/GL.h>
#include <gl/GLU.h>
#include <math.h>

#pragma comment (lib, "OpenGL32.lib")
#pragma comment (lib, "GLU32.lib")

#define WINDOW_TITLE "Black Myth Wukong - Armored Monkey King Warrior"
#define PI 3.14159265359

// Global variables for camera control
float rotationX = 10.0f;
float rotationY = 0.0f;
float zoom = -15.0f;

// Forward declarations
void drawWukongMuscularLeg(bool isLeft);
void drawHighContrastArmoredPants(float legHeight);
void drawWukongOuterArmorLayer(float legHeight);
void drawEnhancedHeritageBootWithContrast(bool isLeft);
void drawBlackMythWukongCharacter(bool isLeft);

// Function to draw Wukong-style muscular leg anatomy
void drawWukongMuscularLeg(bool isLeft) {
    glPushMatrix();
    
    if (!isLeft) {
        glScalef(-1.0f, 1.0f, 1.0f);
    }
    
    // Enhanced skin tones for Wukong (golden-brown monkey fur coloring)
    GLfloat wukongSkinColor[] = { 0.85f, 0.7f, 0.45f, 1.0f }; // Golden-brown monkey fur tone
    GLfloat muscleDefinition[] = { 0.75f, 0.6f, 0.35f, 1.0f }; // Darker muscle definition
    
    // --- ENHANCED UPPER THIGH (Much Larger and More Muscular) ---
    glColor3fv(wukongSkinColor);
    
    // Main upper thigh muscle mass
    glPushMatrix();
    glTranslatef(0.0f, 6.2f, 0.0f);
    glScalef(0.85f, 1.4f, 0.85f); // MUCH LARGER - increased for Wukong
    GLUquadric* upperThigh = gluNewQuadric();
    gluSphere(upperThigh, 0.5, 20, 20);
    gluDeleteQuadric(upperThigh);
    glPopMatrix();
    
    // Quadriceps muscle definition
    glColor3fv(muscleDefinition);
    for (int i = 0; i < 3; i++) {
        float angle = (i - 1) * 0.3f;
        glPushMatrix();
        glTranslatef(sinf(angle) * 0.25f, 6.1f, cosf(angle) * 0.15f + 0.2f);
        glScalef(0.15f, 0.6f, 0.2f);
        GLUquadric* quad = gluNewQuadric();
        gluSphere(quad, 0.5, 16, 16);
        gluDeleteQuadric(quad);
        glPopMatrix();
    }
    
    // --- ENHANCED MID THIGH (Larger and More Defined) ---
    glColor3fv(wukongSkinColor);
    glPushMatrix();
    glTranslatef(0.0f, 5.2f, 0.0f);
    glScalef(0.8f, 1.2f, 0.8f); // LARGER - increased for Wukong
    GLUquadric* midThigh = gluNewQuadric();
    gluSphere(midThigh, 0.5, 20, 20);
    gluDeleteQuadric(midThigh);
    glPopMatrix();
    
    // Hamstring muscle definition
    glColor3fv(muscleDefinition);
    glPushMatrix();
    glTranslatef(0.0f, 5.1f, -0.3f);
    glScalef(0.6f, 0.8f, 0.25f);
    GLUquadric* hamstring = gluNewQuadric();
    gluSphere(hamstring, 0.5, 16, 16);
    gluDeleteQuadric(hamstring);
    glPopMatrix();
    
    // --- ENHANCED KNEE AREA ---
    glColor3fv(wukongSkinColor);
    glPushMatrix();
    glTranslatef(0.0f, 4.3f, 0.0f);
    glScalef(0.65f, 0.4f, 0.65f);
    GLUquadric* knee = gluNewQuadric();
    gluSphere(knee, 0.5, 16, 16);
    gluDeleteQuadric(knee);
    glPopMatrix();
    
    // --- ENHANCED CALF MUSCLES (Much More Defined) ---
    glColor3fv(wukongSkinColor);
    
    // Main calf muscle
    glPushMatrix();
    glTranslatef(0.0f, 3.8f, 0.1f);
    glScalef(0.55f, 0.9f, 0.7f); // LARGER calves
    GLUquadric* calf = gluNewQuadric();
    gluSphere(calf, 0.5, 18, 18);
    gluDeleteQuadric(calf);
    glPopMatrix();
    
    // Gastrocnemius muscle definition
    glColor3fv(muscleDefinition);
    glPushMatrix();
    glTranslatef(0.0f, 3.7f, 0.2f);
    glScalef(0.35f, 0.7f, 0.4f);
    GLUquadric* gastrocnemius = gluNewQuadric();
    gluSphere(gastrocnemius, 0.5, 14, 14);
    gluDeleteQuadric(gastrocnemius);
    glPopMatrix();
    
    // Soleus muscle
    glPushMatrix();
    glTranslatef(0.0f, 3.5f, -0.1f);
    glScalef(0.4f, 0.5f, 0.3f);
    GLUquadric* soleus = gluNewQuadric();
    gluSphere(soleus, 0.5, 14, 14);
    gluDeleteQuadric(soleus);
    glPopMatrix();
    
    // --- ENHANCED SHIN AREA ---
    glColor3fv(wukongSkinColor);
    glPushMatrix();
    glTranslatef(0.0f, 3.2f, 0.3f);
    glScalef(0.35f, 0.6f, 0.25f);
    GLUquadric* shin = gluNewQuadric();
    gluSphere(shin, 0.5, 14, 14);
    gluDeleteQuadric(shin);
    glPopMatrix();
    
    glPopMatrix();
}

// Enhanced function to draw high-contrast armored combat pants
void drawHighContrastArmoredPants(float legHeight) {
    // High-contrast armored pants colors
    GLfloat pantsColor[] = { 0.08f, 0.06f, 0.04f, 1.0f };       // Very dark tactical fabric
    GLfloat reinforcementColor[] = { 0.12f, 0.08f, 0.06f, 1.0f }; // Dark reinforcement
    GLfloat armorColor[] = { 0.5f, 0.5f, 0.53f, 1.0f };         // Bright steel gray armor
    GLfloat strapColor[] = { 0.05f, 0.03f, 0.02f, 1.0f };       // Very dark straps
    GLfloat buckleColor[] = { 0.6f, 0.6f, 0.62f, 1.0f };        // Bright metal buckles
    GLfloat rivetColor[] = { 0.4f, 0.4f, 0.42f, 1.0f };         // Medium metal rivets
    
    // RAISED pants height for boot visibility - pants now start higher
    float pantsBottom = 4.2f;  // RAISED from 3.0f to 4.2f for boot clearance
    float pantsTop = pantsBottom + legHeight;
    
    // Draw main armored pants with high contrast
    int segments = 24;
    float angleStep = 2.0f * PI / segments;
    glColor3fv(pantsColor);
    
    glBegin(GL_TRIANGLE_STRIP);
    for (int i = 0; i <= segments; i++) {
        float angle = i * angleStep;
        float x = cosf(angle);
        float z = sinf(angle);
        
        float bottomRadius = 0.26f;
        glNormal3f(x, 0, z);
        glVertex3f(x * bottomRadius, pantsBottom, z * bottomRadius);
        
        float topRadius = 0.55f;
        glNormal3f(x, 0, z);
        glVertex3f(x * topRadius, pantsTop, z * topRadius);
    }
    glEnd();
    
    // --- ENHANCED KNEE ARMOR PLATE ---
    glColor3fv(armorColor);
    glPushMatrix();
    glTranslatef(0.0f, 5.2f, 0.18f);  // ADJUSTED position to match new pants height
    glScalef(0.35f, 0.25f, 0.12f); // Larger armor plate
    GLUquadric* kneePlate = gluNewQuadric();
    gluSphere(kneePlate, 1.0, 20, 16);
    gluDeleteQuadric(kneePlate);
    glPopMatrix();
    
    // Enhanced knee armor rivets
    glColor3fv(rivetColor);
    for (int i = 0; i < 10; i++) { // More rivets
        float angle = i * 2.0f * PI / 10.0f;
        float x = sinf(angle) * 0.28f;
        float y = 5.2f + cosf(angle) * 0.27f;  // ADJUSTED position
        
        glPushMatrix();
        glTranslatef(x, y, 0.23f);
        glScalef(0.02f, 0.02f, 0.02f); // Larger rivets
        GLUquadric* rivet = gluNewQuadric();
        gluSphere(rivet, 1.0f, 8, 8);
        gluDeleteQuadric(rivet);
        glPopMatrix();
    }

    // --- ENHANCED SHIN ARMOR PLATES ---
    glColor3fv(armorColor);
    
    // Upper shin plate
    glPushMatrix();
    glTranslatef(0.0f, 4.8f, 0.16f);  // ADJUSTED position
    glScalef(0.3f, 0.2f, 0.1f); // Larger plates
    GLUquadric* upperShin = gluNewQuadric();
    gluSphere(upperShin, 1.0, 20, 16);
    gluDeleteQuadric(upperShin);
    glPopMatrix();
    
    // Enhanced shin armor rivets - only for upper plate
    glColor3fv(rivetColor);
    float plateY = 4.8f;  // Only upper plate now
    for (int i = 0; i < 8; i++) { // More rivets
        float angle = (i - 3.5f) * 0.6f;
        float x = sinf(angle) * 0.22f;
        float y = plateY + cosf(angle) * 0.12f;
        
        glPushMatrix();
        glTranslatef(x, y, 0.21f);
        glScalef(0.015f, 0.015f, 0.015f); // Larger rivets
        GLUquadric* rivet = gluNewQuadric();
        gluSphere(rivet, 1.0f, 8, 8);
        gluDeleteQuadric(rivet);
        glPopMatrix();
    }

    // --- ENHANCED ARMORED STRAPS AND BUCKLES ---
    for (int j = 0; j < 2; j++) { // REDUCED straps to avoid boot coverage
        float y = pantsBottom + 0.3f + j * 0.15f;  // ADJUSTED to new pants position
        
        // Main strap
        glColor3fv(strapColor);
        glPushMatrix();
        glTranslatef(0.0f, y, 0.0f);
        glRotatef(90, 1, 0, 0);
        glScalef(0.3f, 0.3f, 0.03f); // Wider straps
        GLUquadric* strap = gluNewQuadric();
        gluCylinder(strap, 1.0, 1.0, 1.0, 24, 1);
        gluDeleteQuadric(strap);
        glPopMatrix();
        
        // Enhanced buckle
        glColor3fv(buckleColor);
        glPushMatrix();
        glTranslatef(0.25f, y, 0.0f);
        glScalef(0.05f, 0.03f, 0.025f); // Larger buckles
        GLUquadric* buckle = gluNewQuadric();
        gluSphere(buckle, 1.0f, 10, 10);
        gluDeleteQuadric(buckle);
        glPopMatrix();
        
        // Buckle pin
        glPushMatrix();
        glTranslatef(0.22f, y, 0.0f);
        glScalef(0.01f, 0.02f, 0.01f);
        GLUquadric* pin = gluNewQuadric();
        gluSphere(pin, 1.0f, 6, 6);
        gluDeleteQuadric(pin);
        glPopMatrix();
    }
    
    // --- ENHANCED VERTICAL REINFORCEMENT STRAPS ---
    glColor3fv(strapColor);
    for (int side = -1; side <= 1; side += 2) {
        glPushMatrix();
        glTranslatef(side * 0.26f, pantsBottom + 0.7f, 0.0f);  // ADJUSTED to new position
        glScalef(0.03f, 0.7f, 0.03f); // SHORTENED straps
        GLUquadric* vertStrap = gluNewQuadric();
        gluSphere(vertStrap, 1.0f, 10, 10);
        gluDeleteQuadric(vertStrap);
        glPopMatrix();
    }

    // --- ENHANCED CARGO POCKET WITH ARMOR REINFORCEMENT ---
    glColor3fv(armorColor);
    glPushMatrix();
    glTranslatef(0.38f, 5.7f, 0.12f);  // ADJUSTED position
    glScalef(0.18f, 0.3f, 0.08f); // Larger pocket
    GLUquadric* cargoPocket = gluNewQuadric();
    gluSphere(cargoPocket, 1.0f, 16, 16);
    gluDeleteQuadric(cargoPocket);
    glPopMatrix();
    
    // Cargo pocket rivets
    glColor3fv(rivetColor);
    for (int i = 0; i < 6; i++) {
        float y = 5.5f + i * 0.08f;  // ADJUSTED position
        glPushMatrix();
        glTranslatef(0.35f, y, 0.16f);
        glScalef(0.012f, 0.012f, 0.012f);
        GLUquadric* pocketRivet = gluNewQuadric();
        gluSphere(pocketRivet, 1.0f, 6, 6);
        gluDeleteQuadric(pocketRivet);
        glPopMatrix();
    }

    // --- ENHANCED REINFORCED CUFF ---
    glColor3fv(reinforcementColor);
    glPushMatrix();
    glTranslatef(0.0f, pantsBottom, 0.0f);
    glRotatef(90, 1, 0, 0);
    glScalef(0.28f, 0.28f, 0.08f); // Thicker cuff
    GLUquadric* cuff = gluNewQuadric();
    gluCylinder(cuff, 1.0f, 1.0f, 1.0f, segments, 1);
    gluDeleteQuadric(cuff);
    glPopMatrix();

    // --- ENHANCED ARMOR ATTACHMENT STITCHING ---
    glDisable(GL_LIGHTING);
    glColor3f(0.7f, 0.6f, 0.45f); // Bright contrast stitching
    glLineWidth(3.5f);
    
    // Knee armor attachment stitching
    glBegin(GL_LINE_LOOP);
    for (int i = 0; i <= 16; i++) {
        float angle = i * 2.0f * PI / 16.0f;
        float x = sinf(angle) * 0.37f;
        float y = 5.2f + cosf(angle) * 0.27f;  // ADJUSTED position
        glVertex3f(x, y, 0.20f);
    }
    glEnd();
    
    // Upper shin armor attachment stitching
    glBegin(GL_LINE_LOOP);
    for (int i = 0; i <= 12; i++) {
        float angle = (i - 6) * 0.12f;
        float x = sinf(angle) * 0.32f;
        float y = 4.8f + cosf(angle) * 0.22f;  // ADJUSTED position
        glVertex3f(x, y, 0.18f);
    }
    glEnd();
    
    glLineWidth(1.0f);
    glEnable(GL_LIGHTING);

    // Add enhanced waistband
    glColor3fv(reinforcementColor);
    glPushMatrix();
    glTranslatef(0.0f, pantsTop, 0.0f);
    glRotatef(90, 1, 0, 0);
    glScalef(0.57f, 0.57f, 0.12f);
    GLUquadric* waistband = gluNewQuadric();
    gluCylinder(waistband, 1.0f, 1.0f, 1.0f, segments, 1);
    gluDeleteQuadric(waistband);
    glPopMatrix();
}

// Enhanced function to draw complete Black Myth Wukong character
void drawBlackMythWukongCharacter(bool isLeft) {
    glPushMatrix();
    
    if (!isLeft) {
        glScalef(-1.0f, 1.0f, 1.0f);
    }
    
    // Draw Wukong's enhanced muscular leg anatomy
    drawWukongMuscularLeg(isLeft);
    
    // Draw the original armored pants (now as inner layer)
    drawHighContrastArmoredPants(3.5f);
    
    // Draw the new ornate outer armor layer
    drawWukongOuterArmorLayer(3.5f);
    
    glPopMatrix();
}

// Enhanced function to draw outer armor layer with Wukong-style details
void drawWukongOuterArmorLayer(float legHeight) {
    // Wukong-inspired armor colors (golden, bronze, and dark metal)
    GLfloat goldenArmor[] = { 0.8f, 0.65f, 0.2f, 1.0f };      // Golden armor plates
    GLfloat bronzeArmor[] = { 0.7f, 0.45f, 0.15f, 1.0f };     // Bronze decorative elements
    GLfloat darkMetal[] = { 0.15f, 0.12f, 0.1f, 1.0f };       // Dark metal framework
    GLfloat jadeTrim[] = { 0.2f, 0.6f, 0.3f, 1.0f };          // Jade-colored trim
    GLfloat redAccent[] = { 0.8f, 0.2f, 0.1f, 1.0f };         // Red decorative accents
    
    // Outer armor extends higher to cover more of the muscular legs
    float armorBottom = 3.8f;
    float armorTop = armorBottom + legHeight + 1.5f; // Extended coverage
    
    // --- MAIN OUTER ARMOR SHELL ---
    int segments = 28;
    float angleStep = 2.0f * PI / segments;
    
    // Primary armor shell
    glColor3fv(goldenArmor);
    glBegin(GL_TRIANGLE_STRIP);
    for (int i = 0; i <= segments; i++) {
        float angle = i * angleStep;
        float x = cosf(angle);
        float z = sinf(angle);
        
        // Bottom radius (larger to accommodate muscular legs)
        float bottomRadius = 0.4f; // Increased from 0.26f
        glNormal3f(x, 0, z);
        glVertex3f(x * bottomRadius, armorBottom, z * bottomRadius);
        
        // Top radius (tapered but still substantial)
        float topRadius = 0.7f; // Increased from 0.55f
        glNormal3f(x, 0, z);
        glVertex3f(x * topRadius, armorTop, z * topRadius);
    }
    glEnd();
    
    // --- SEGMENTED ARMOR PLATES (Wukong Style) ---
    for (int segment = 0; segment < 6; segment++) {
        float segmentHeight = armorBottom + 0.8f + (segment * 0.7f);
        
        // Main armor segments
        glColor3fv(goldenArmor);
        glPushMatrix();
        glTranslatef(0.0f, segmentHeight, 0.0f);
        glRotatef(90, 1, 0, 0);
        glScalef(0.42f + (segment * 0.05f), 0.42f + (segment * 0.05f), 0.08f);
        GLUquadric* armorRing = gluNewQuadric();
        gluCylinder(armorRing, 1.0f, 1.0f, 1.0f, segments, 1);
        gluDeleteQuadric(armorRing);
        glPopMatrix();
        
        // Bronze decorative trim
        glColor3fv(bronzeArmor);
        glPushMatrix();
        glTranslatef(0.0f, segmentHeight + 0.04f, 0.0f);
        glRotatef(90, 1, 0, 0);
        glScalef(0.44f + (segment * 0.05f), 0.44f + (segment * 0.05f), 0.02f);
        GLUquadric* trim = gluNewQuadric();
        gluCylinder(trim, 1.0f, 1.0f, 1.0f, segments, 1);
        gluDeleteQuadric(trim);
        glPopMatrix();
    }
    
    // --- ENHANCED THIGH ARMOR PLATES ---
    glColor3fv(goldenArmor);
    
    // Upper thigh protection
    glPushMatrix();
    glTranslatef(0.0f, 6.5f, 0.25f);
    glScalef(0.6f, 0.4f, 0.15f);
    GLUquadric* upperThighArmor = gluNewQuadric();
    gluSphere(upperThighArmor, 1.0, 24, 20);
    gluDeleteQuadric(upperThighArmor);
    glPopMatrix();
    
    // Mid thigh protection
    glPushMatrix();
    glTranslatef(0.0f, 5.8f, 0.22f);
    glScalef(0.55f, 0.35f, 0.12f);
    GLUquadric* midThighArmor = gluNewQuadric();
    gluSphere(midThighArmor, 1.0, 24, 20);
    gluDeleteQuadric(midThighArmor);
    glPopMatrix();
    
    // --- ENHANCED KNEE ARMOR (Ornate Wukong Style) ---
    glColor3fv(goldenArmor);
    glPushMatrix();
    glTranslatef(0.0f, 4.8f, 0.3f);
    glScalef(0.5f, 0.35f, 0.18f);
    GLUquadric* kneeArmor = gluNewQuadric();
    gluSphere(kneeArmor, 1.0, 28, 24);
    gluDeleteQuadric(kneeArmor);
    glPopMatrix();
    
    // Jade accents on knee armor
    glColor3fv(jadeTrim);
    for (int i = 0; i < 8; i++) {
        float angle = i * 2.0f * PI / 8.0f;
        float x = sinf(angle) * 0.35f;
        float z = cosf(angle) * 0.12f + 0.35f;
        
        glPushMatrix();
        glTranslatef(x, 4.8f, z);
        glScalef(0.03f, 0.03f, 0.03f);
        GLUquadric* jadeStud = gluNewQuadric();
        gluSphere(jadeStud, 1.0f, 10, 10);
        gluDeleteQuadric(jadeStud);
        glPopMatrix();
    }
    
    // --- DECORATIVE SIDE PANELS (Monkey King Motifs) ---
    for (int side = -1; side <= 1; side += 2) {
        // Main side panel
        glColor3fv(bronzeArmor);
        glPushMatrix();
        glTranslatef(side * 0.45f, 5.5f, 0.1f);
        glScalef(0.15f, 1.8f, 0.3f);
        GLUquadric* sidePanel = gluNewQuadric();
        gluSphere(sidePanel, 1.0f, 20, 20);
        gluDeleteQuadric(sidePanel);
        glPopMatrix();
        
        // Decorative studs
        glColor3fv(redAccent);
        for (int i = 0; i < 5; i++) {
            float y = 4.8f + i * 0.3f;
            glPushMatrix();
            glTranslatef(side * 0.45f, y, 0.2f);
            glScalef(0.04f, 0.04f, 0.04f);
            GLUquadric* stud = gluNewQuadric();
            gluSphere(stud, 1.0f, 12, 12);
            gluDeleteQuadric(stud);
            glPopMatrix();
        }
    }
    
    // --- ORNATE SHIN GUARDS ---
    glColor3fv(goldenArmor);
    glPushMatrix();
    glTranslatef(0.0f, 4.0f, 0.25f);
    glScalef(0.45f, 0.3f, 0.15f);
    GLUquadric* shinGuard = gluNewQuadric();
    gluSphere(shinGuard, 1.0, 24, 20);
    gluDeleteQuadric(shinGuard);
    glPopMatrix();
    
    // --- DECORATIVE ENGRAVINGS AND PATTERNS ---
    glDisable(GL_LIGHTING);
    glColor3f(0.9f, 0.8f, 0.3f); // Bright golden engravings
    glLineWidth(2.5f);
    
    // Cloud pattern engravings (traditional Chinese motif)
    for (int layer = 0; layer < 4; layer++) {
        float y = 4.5f + layer * 0.8f;
        glBegin(GL_LINE_STRIP);
        for (int i = 0; i <= 20; i++) {
            float angle = i * 2.0f * PI / 20.0f;
            float radius = 0.3f + sinf(angle * 3.0f) * 0.05f;
            float x = cosf(angle) * radius;
            float z = sinf(angle) * radius * 0.7f + 0.2f;
            glVertex3f(x, y, z);
        }
        glEnd();
    }
    
    // Dragon scale pattern
    for (int ring = 0; ring < 3; ring++) {
        float y = 5.2f + ring * 0.7f;
        for (int scale = 0; scale < 12; scale++) {
            float angle = scale * 2.0f * PI / 12.0f;
            float x = cosf(angle) * 0.38f;
            float z = sinf(angle) * 0.25f + 0.15f;
            
            glBegin(GL_LINE_LOOP);
            for (int i = 0; i < 6; i++) {
                float scaleAngle = i * PI / 3.0f;
                float dx = cosf(scaleAngle) * 0.03f;
                float dz = sinf(scaleAngle) * 0.02f;
                glVertex3f(x + dx, y, z + dz);
            }
            glEnd();
        }
    }
    
    glLineWidth(1.0f);
    glEnable(GL_LIGHTING);
    
    // --- ARMOR ATTACHMENT CHAINS AND RINGS ---
    glColor3fv(darkMetal);
    for (int i = 0; i < 4; i++) {
        float y = 4.5f + i * 0.6f;
        
        // Connecting rings
        for (int side = -1; side <= 1; side += 2) {
            glPushMatrix();
            glTranslatef(side * 0.35f, y, 0.0f);
            glRotatef(90, 0, 1, 0);
            glScalef(0.02f, 0.02f, 0.05f);
            GLUquadric* ring = gluNewQuadric();
            gluCylinder(ring, 1.0f, 1.0f, 1.0f, 12, 1);
            gluDeleteQuadric(ring);
            glPopMatrix();
        }
    }
}

// Enhanced function to draw outer armor layer with Wukong-style details
void drawWukongOuterArmorLayer(float legHeight) {
    // Wukong-inspired armor colors (golden, bronze, and dark metal)
    GLfloat goldenArmor[] = { 0.8f, 0.65f, 0.2f, 1.0f };      // Golden armor plates
    GLfloat bronzeArmor[] = { 0.7f, 0.45f, 0.15f, 1.0f };     // Bronze decorative elements
    GLfloat darkMetal[] = { 0.15f, 0.12f, 0.1f, 1.0f };       // Dark metal framework
    GLfloat jadeTrim[] = { 0.2f, 0.6f, 0.3f, 1.0f };          // Jade-colored trim
    GLfloat redAccent[] = { 0.8f, 0.2f, 0.1f, 1.0f };         // Red decorative accents
    
    // Outer armor extends higher to cover more of the muscular legs
    float armorBottom = 3.8f;
    float armorTop = armorBottom + legHeight + 1.5f; // Extended coverage
    
    // --- MAIN OUTER ARMOR SHELL ---
    int segments = 28;
    float angleStep = 2.0f * PI / segments;
    
    // Primary armor shell
    glColor3fv(goldenArmor);
    glBegin(GL_TRIANGLE_STRIP);
    for (int i = 0; i <= segments; i++) {
        float angle = i * angleStep;
        float x = cosf(angle);
        float z = sinf(angle);
        
        // Bottom radius (larger to accommodate muscular legs)
        float bottomRadius = 0.4f; // Increased from 0.26f
        glNormal3f(x, 0, z);
        glVertex3f(x * bottomRadius, armorBottom, z * bottomRadius);
        
        // Top radius (tapered but still substantial)
        float topRadius = 0.7f; // Increased from 0.55f
        glNormal3f(x, 0, z);
        glVertex3f(x * topRadius, armorTop, z * topRadius);
    }
    glEnd();
    
    // --- SEGMENTED ARMOR PLATES (Wukong Style) ---
    for (int segment = 0; segment < 6; segment++) {
        float segmentHeight = armorBottom + 0.8f + (segment * 0.7f);
        
        // Main armor segments
        glColor3fv(goldenArmor);
        glPushMatrix();
        glTranslatef(0.0f, segmentHeight, 0.0f);
        glRotatef(90, 1, 0, 0);
        glScalef(0.42f + (segment * 0.05f), 0.42f + (segment * 0.05f), 0.08f);
        GLUquadric* armorRing = gluNewQuadric();
        gluCylinder(armorRing, 1.0f, 1.0f, 1.0f, segments, 1);
        gluDeleteQuadric(armorRing);
        glPopMatrix();
        
        // Bronze decorative trim
        glColor3fv(bronzeArmor);
        glPushMatrix();
        glTranslatef(0.0f, segmentHeight + 0.04f, 0.0f);
        glRotatef(90, 1, 0, 0);
        glScalef(0.44f + (segment * 0.05f), 0.44f + (segment * 0.05f), 0.02f);
        GLUquadric* trim = gluNewQuadric();
        gluCylinder(trim, 1.0f, 1.0f, 1.0f, segments, 1);
        gluDeleteQuadric(trim);
        glPopMatrix();
    }
    
    // --- ENHANCED THIGH ARMOR PLATES ---
    glColor3fv(goldenArmor);
    
    // Upper thigh protection
    glPushMatrix();
    glTranslatef(0.0f, 6.5f, 0.25f);
    glScalef(0.6f, 0.4f, 0.15f);
    GLUquadric* upperThighArmor = gluNewQuadric();
    gluSphere(upperThighArmor, 1.0, 24, 20);
    gluDeleteQuadric(upperThighArmor);
    glPopMatrix();
    
    // Mid thigh protection
    glPushMatrix();
    glTranslatef(0.0f, 5.8f, 0.22f);
    glScalef(0.55f, 0.35f, 0.12f);
    GLUquadric* midThighArmor = gluNewQuadric();
    gluSphere(midThighArmor, 1.0, 24, 20);
    gluDeleteQuadric(midThighArmor);
    glPopMatrix();
    
    // --- ENHANCED KNEE ARMOR (Ornate Wukong Style) ---
    glColor3fv(goldenArmor);
    glPushMatrix();
    glTranslatef(0.0f, 4.8f, 0.3f);
    glScalef(0.5f, 0.35f, 0.18f);
    GLUquadric* kneeArmor = gluNewQuadric();
    gluSphere(kneeArmor, 1.0, 28, 24);
    gluDeleteQuadric(kneeArmor);
    glPopMatrix();
    
    // Jade accents on knee armor
    glColor3fv(jadeTrim);
    for (int i = 0; i < 8; i++) {
        float angle = i * 2.0f * PI / 8.0f;
        float x = sinf(angle) * 0.35f;
        float z = cosf(angle) * 0.12f + 0.35f;
        
        glPushMatrix();
        glTranslatef(x, 4.8f, z);
        glScalef(0.03f, 0.03f, 0.03f);
        GLUquadric* jadeStud = gluNewQuadric();
        gluSphere(jadeStud, 1.0f, 10, 10);
        gluDeleteQuadric(jadeStud);
        glPopMatrix();
    }
    
    // --- DECORATIVE SIDE PANELS (Monkey King Motifs) ---
    for (int side = -1; side <= 1; side += 2) {
        // Main side panel
        glColor3fv(bronzeArmor);
        glPushMatrix();
        glTranslatef(side * 0.45f, 5.5f, 0.1f);
        glScalef(0.15f, 1.8f, 0.3f);
        GLUquadric* sidePanel = gluNewQuadric();
        gluSphere(sidePanel, 1.0f, 20, 20);
        gluDeleteQuadric(sidePanel);
        glPopMatrix();
        
        // Decorative studs
        glColor3fv(redAccent);
        for (int i = 0; i < 5; i++) {
            float y = 4.8f + i * 0.3f;
            glPushMatrix();
            glTranslatef(side * 0.45f, y, 0.2f);
            glScalef(0.04f, 0.04f, 0.04f);
            GLUquadric* stud = gluNewQuadric();
            gluSphere(stud, 1.0f, 12, 12);
            gluDeleteQuadric(stud);
            glPopMatrix();
        }
    }
    
    // --- ORNATE SHIN GUARDS ---
    glColor3fv(goldenArmor);
    glPushMatrix();
    glTranslatef(0.0f, 4.0f, 0.25f);
    glScalef(0.45f, 0.3f, 0.15f);
    GLUquadric* shinGuard = gluNewQuadric();
    gluSphere(shinGuard, 1.0, 24, 20);
    gluDeleteQuadric(shinGuard);
    glPopMatrix();
    
    // --- DECORATIVE ENGRAVINGS AND PATTERNS ---
    glDisable(GL_LIGHTING);
    glColor3f(0.9f, 0.8f, 0.3f); // Bright golden engravings
    glLineWidth(2.5f);
    
    // Cloud pattern engravings (traditional Chinese motif)
    for (int layer = 0; layer < 4; layer++) {
        float y = 4.5f + layer * 0.8f;
        glBegin(GL_LINE_STRIP);
        for (int i = 0; i <= 20; i++) {
            float angle = i * 2.0f * PI / 20.0f;
            float radius = 0.3f + sinf(angle * 3.0f) * 0.05f;
            float x = cosf(angle) * radius;
            float z = sinf(angle) * radius * 0.7f + 0.2f;
            glVertex3f(x, y, z);
        }
        glEnd();
    }
    
    // Dragon scale pattern
    for (int ring = 0; ring < 3; ring++) {
        float y = 5.2f + ring * 0.7f;
        for (int scale = 0; scale < 12; scale++) {
            float angle = scale * 2.0f * PI / 12.0f;
            float x = cosf(angle) * 0.38f;
            float z = sinf(angle) * 0.25f + 0.15f;
            
            glBegin(GL_LINE_LOOP);
            for (int i = 0; i < 6; i++) {
                float scaleAngle = i * PI / 3.0f;
                float dx = cosf(scaleAngle) * 0.03f;
                float dz = sinf(scaleAngle) * 0.02f;
                glVertex3f(x + dx, y, z + dz);
            }
            glEnd();
        }
    }
    
    glLineWidth(1.0f);
    glEnable(GL_LIGHTING);
    
    // --- ARMOR ATTACHMENT CHAINS AND RINGS ---
    glColor3fv(darkMetal);
    for (int i = 0; i < 4; i++) {
        float y = 4.5f + i * 0.6f;
        
        // Connecting rings
        for (int side = -1; side <= 1; side += 2) {
            glPushMatrix();
            glTranslatef(side * 0.35f, y, 0.0f);
            glRotatef(90, 0, 1, 0);
            glScalef(0.02f, 0.02f, 0.05f);
            GLUquadric* ring = gluNewQuadric();
            gluCylinder(ring, 1.0f, 1.0f, 1.0f, 12, 1);
            gluDeleteQuadric(ring);
            glPopMatrix();
        }
    }
}

// Enhanced function to draw enhanced heritage combat boot with high contrast colors
void drawEnhancedHeritageBootWithContrast(bool isLeft) {
    // High-contrast heritage colors to showcase details
    GLfloat soleColor[] = { 0.15f, 0.08f, 0.05f, 1.0f };        // Very dark brown sole for contrast
    GLfloat leatherColor[] = { 0.65f, 0.45f, 0.28f, 1.0f };     // Rich golden-brown leather (lighter)
    GLfloat darkerLeather[] = { 0.5f, 0.32f, 0.2f, 1.0f };      // Medium brown for panels
    GLfloat stitchColor[] = { 0.95f, 0.85f, 0.65f, 1.0f };      // Bright tan stitching for visibility
    GLfloat lacingColor[] = { 0.2f, 0.12f, 0.08f, 1.0f };       // Dark brown lacing for contrast
    GLfloat metalColor[] = { 0.8f, 0.8f, 0.82f, 1.0f };         // Bright silver metal
    
    glPushMatrix(); // Start of boot matrix

    // Mirror the boot if it's the right one
    if (!isLeft) {
        glScalef(-1.0f, 1.0f, 1.0f);
    }

    // --- Enhanced Heritage Sole with High Contrast ---
    glColor3fv(soleColor);
    glPushMatrix();
    glTranslatef(0.0f, -0.8f, 0.1f);
    glScalef(0.8f, 0.12f, 2.4f);
    GLUquadric* sole = gluNewQuadric();
    gluSphere(sole, 0.5, 20, 20);
    gluDeleteQuadric(sole);
    glPopMatrix();

    // Add traditional sole welt with enhanced contrast
    GLfloat weltColor[] = { 0.45f, 0.28f, 0.18f, 1.0f }; // Medium brown welt
    glColor3fv(weltColor);
    glPushMatrix();
    glTranslatef(0.0f, -0.68f, 0.1f);
    glRotatef(90, 1, 0, 0);
    glScalef(0.82f, 2.5f, 0.05f);
    GLUquadric* welt = gluNewQuadric();
    gluCylinder(welt, 0.5, 0.5, 1.0, 24, 1);
    gluDeleteQuadric(welt);
    glPopMatrix();

    // Enhanced welt stitching
    glDisable(GL_LIGHTING);
    glColor3f(0.95f, 0.85f, 0.7f); // Very bright tan welt stitching
    glLineWidth(3.0f);
    glBegin(GL_LINE_LOOP);
    for (int i = 0; i <= 30; i++) {
        float angle = i * 2.0f * PI / 30.0f;
        float x = cosf(angle) * 0.42f;
        float z = sinf(angle) * 1.2f;
        glVertex3f(x, -0.67f, z + 0.1f);
    }
    glEnd();
    glLineWidth(1.0f);
    glEnable(GL_LIGHTING);

    // Add treaded sole pattern
    // --- Enhanced Military Heel ---
    glColor3fv(soleColor);
    glPushMatrix();
    glTranslatef(0.0f, -0.6f, -0.8f);
    glScalef(0.55f, 0.35f, 0.45f);
    GLUquadric* heel = gluNewQuadric();
    gluSphere(heel, 0.5, 12, 12);
    gluDeleteQuadric(heel);
    glPopMatrix();

    // --- Main Foot Body (Enhanced Organic Shape) ---
    glColor3fv(leatherColor);
    glPushMatrix();
    glTranslatef(0.0f, -0.25f, 0.2f);
    drawOrganicFootShape();
    glPopMatrix();

    // --- Reinforced Toe Cap ---
    drawReinforcedToeCap();

    // --- Enhanced Combat Boot Shaft ---
    glColor3fv(leatherColor);
    glPushMatrix();
    glTranslatef(0.0f, 0.45f, -0.3f);
    drawCurvedBootShaft(2.7f, 0.52f, 0.44f); // INCREASED height from 1.9f to 2.7f for much taller boots
    glPopMatrix();

    // --- Heel Counter Protection ---
    drawHeelCounter();

    // --- Enhanced Ankle Support ---
    drawAnkleSupport();

    // --- Heritage Cuff ---
    glColor3fv(darkerLeather);
    glPushMatrix();
    glTranslatef(0.0f, 3.0f, -0.3f); // RAISED cuff position from 2.2f to 3.0f
    glScalef(0.47f, 0.18f, 0.47f);
    GLUquadric* cuff = gluNewQuadric();
    gluSphere(cuff, 1.0f, 16, 16);
    gluDeleteQuadric(cuff);
    glPopMatrix();

    // --- Enhanced Pull Tab ---
    GLfloat tabColor[] = { 0.5f, 0.3f, 0.2f, 1.0f };
    glColor3fv(tabColor);
    
    glPushMatrix();
    glTranslatef(0.0f, 2.8f, -0.45f); // RAISED pull tab from 2.0f to 2.8f
    glScalef(0.15f, 0.25f, 0.08f);
    GLUquadric* tab = gluNewQuadric();
    gluSphere(tab, 0.5, 12, 12);
    gluDeleteQuadric(tab);
    glPopMatrix();

    // --- Gusseted Tongue ---
    glColor3fv(leatherColor);
    glPushMatrix();
    glTranslatef(0.0f, 0.25f, 0.65f);
    glRotatef(-8, 1, 0, 0);
    glScalef(0.32f, 0.06f, 0.85f);
    GLUquadric* tongue = gluNewQuadric();
    gluSphere(tongue, 0.5, 12, 12);
    gluDeleteQuadric(tongue);
    glPopMatrix();

    // --- Enhanced Side Reinforcement Panels ---
    glColor3fv(darkerLeather);
    // Left panel
    glPushMatrix();
    glTranslatef(-0.37f, 0.35f, 0.0f);
    glScalef(0.12f, 0.9f, 0.65f);
    GLUquadric* leftPanel = gluNewQuadric();
    gluSphere(leftPanel, 0.5, 12, 12);
    gluDeleteQuadric(leftPanel);
    glPopMatrix();
    
    // Right panel
    glPushMatrix();
    glTranslatef(0.37f, 0.35f, 0.0f);
    glScalef(0.12f, 0.9f, 0.65f);
    GLUquadric* rightPanel = gluNewQuadric();
    gluSphere(rightPanel, 0.5, 12, 12);
    gluDeleteQuadric(rightPanel);
    glPopMatrix();

    // --- Enhanced Ventilation Grommets ---
    GLfloat grommetColor[] = { 0.3f, 0.3f, 0.32f, 1.0f }; // Lighter metal
    glColor3fv(grommetColor);
    
    for (int i = 0; i < 3; i++) {
        float y = 0.6f + i * 0.3f;
        
        // Left grommets
        glPushMatrix();
        glTranslatef(-0.4f, y, 0.1f);
        glScalef(0.03f, 0.03f, 0.03f); // Slightly larger
        GLUquadric* leftGrommet = gluNewQuadric();
        gluSphere(leftGrommet, 1.0f, 8, 8);
        gluDeleteQuadric(leftGrommet);
        glPopMatrix();
        
        // Right grommets
        glPushMatrix();
        glTranslatef(0.4f, y, 0.1f);
        glScalef(0.03f, 0.03f, 0.03f); // Slightly larger
        GLUquadric* rightGrommet = gluNewQuadric();
        gluSphere(rightGrommet, 1.0f, 8, 8);
        gluDeleteQuadric(rightGrommet);
        glPopMatrix();
    }

    // --- Decorative Stripe (Heritage Detail) ---
    glColor3f(0.9f, 0.7f, 0.4f); // Light tan stripe color
    glLineWidth(4.0f);
    glBegin(GL_LINES);
    glVertex3f(-0.3f, 5.8f, 0.15f);
    glVertex3f(0.3f, 5.8f, 0.15f);
    glEnd();
    
    glPopMatrix();
}

// --- APPLICATION FRAMEWORK (No changes needed below this line) ---

void setupLighting() {
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
    glEnable(GL_COLOR_MATERIAL);

    GLfloat lightPos0[] = { 4.0f, 5.0f, 6.0f, 1.0f };
    GLfloat lightAmbient0[] = { 0.3f, 0.25f, 0.2f, 1.0f };   // Warmer ambient for heritage look
    GLfloat lightDiffuse0[] = { 0.95f, 0.9f, 0.8f, 1.0f };   // Bright natural light
    GLfloat lightSpecular0[] = { 0.4f, 0.35f, 0.25f, 1.0f }; // Soft specular for leather

    glLightfv(GL_LIGHT0, GL_POSITION, lightPos0);
    glLightfv(GL_LIGHT0, GL_AMBIENT, lightAmbient0);
    glLightfv(GL_LIGHT0, GL_DIFFUSE, lightDiffuse0);
    glLightfv(GL_LIGHT0, GL_SPECULAR, lightSpecular0);

    GLfloat matShininess[] = { 12.0f }; // Lower shininess for authentic leather
    glMaterialfv(GL_FRONT_AND_BACK, GL_SHININESS, matShininess);

    glEnable(GL_NORMALIZE);
    glColorMaterial(GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE);
}

LRESULT WINAPI WindowProcedure(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam) {
    switch (msg) {
    case WM_DESTROY:
        PostQuitMessage(0);
        break;

    case WM_KEYDOWN:
        switch (wParam) {
        case VK_ESCAPE: PostQuitMessage(0); break;
        case VK_LEFT:   rotationY -= 5.0f; break;
        case VK_RIGHT:  rotationY += 5.0f; break;
        case VK_UP:     rotationX -= 5.0f; break;
        case VK_DOWN:   rotationX += 5.0f; break;
        case 'W':       zoom += 0.5f; break;
        case 'S':       zoom -= 0.5f; break;
        }
        break;

    default:
        break;
    }
    return DefWindowProc(hWnd, msg, wParam, lParam);
}

bool initPixelFormat(HDC hdc) {
    PIXELFORMATDESCRIPTOR pfd;
    ZeroMemory(&pfd, sizeof(PIXELFORMATDESCRIPTOR));
    pfd.nSize = sizeof(PIXELFORMATDESCRIPTOR);
    pfd.nVersion = 1;
    pfd.dwFlags = PFD_DRAW_TO_WINDOW | PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER;
    pfd.iPixelType = PFD_TYPE_RGBA;
    pfd.cColorBits = 32;
    pfd.cDepthBits = 24;
    pfd.cStencilBits = 0;
    pfd.iLayerType = PFD_MAIN_PLANE;
    int n = ChoosePixelFormat(hdc, &pfd);
    return SetPixelFormat(hdc, n, &pfd);
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();

    // Camera setup - optimized for detail viewing of the mighty Wukong
    glTranslatef(0.0f, -4.0f, zoom); // Pulled back more to see the larger character
    glRotatef(rotationX, 1.0f, 0.0f, 0.0f);
    glRotatef(rotationY, 0.0f, 1.0f, 0.0f);

    // Draw Wukong's enhanced waist and hip area (more muscular and substantial)
    GLfloat wukongSkinColor[] = { 0.85f, 0.7f, 0.45f, 1.0f }; // Golden-brown Wukong skin
    glColor3fv(wukongSkinColor);
    
    // Enhanced hip area (larger and more muscular for Wukong)
    glPushMatrix();
    glTranslatef(0.0f, 7.2f, 0.0f); // Raised slightly higher
    glScalef(1.0f, 0.8f, 0.7f); // MUCH LARGER - increased for Wukong
    GLUquadric* hip = gluNewQuadric();
    gluSphere(hip, 0.5, 20, 20);
    gluDeleteQuadric(hip);
    glPopMatrix();
    
    // Additional muscle definition around waist
    GLfloat muscleDefinition[] = { 0.75f, 0.6f, 0.35f, 1.0f };
    glColor3fv(muscleDefinition);
    
    // Lower back muscles
    glPushMatrix();
    glTranslatef(0.0f, 7.0f, -0.3f);
    glScalef(0.7f, 0.4f, 0.3f);
    GLUquadric* lowerBack = gluNewQuadric();
    gluSphere(lowerBack, 0.5, 14, 14);
    gluDeleteQuadric(lowerBack);
    glPopMatrix();
    
    // Side oblique muscles
    for (int side = -1; side <= 1; side += 2) {
        glPushMatrix();
        glTranslatef(side * 0.4f, 7.1f, 0.0f);
        glScalef(0.2f, 0.5f, 0.3f);
        GLUquadric* oblique = gluNewQuadric();
        gluSphere(oblique, 0.5, 14, 14);
        gluDeleteQuadric(oblique);
        glPopMatrix();
    }

    // Draw left leg with Black Myth Wukong styling
    glPushMatrix();
    glTranslatef(-0.7f, 0.0f, 0.0f); // Positioned wider for larger legs
    drawBlackMythWukongCharacter(true);
    
    // Position and draw left enhanced heritage combat boot with high contrast
    glPushMatrix();
    glTranslatef(0.0f, 1.6f, 0.0f); // Adjusted for larger character
    glScalef(1.1f, 1.2f, 1.1f); // Slightly larger boots for the mighty Wukong
    drawEnhancedHeritageBootWithContrast(true);
    glPopMatrix();
    glPopMatrix();

    // Draw right leg with Black Myth Wukong styling
    glPushMatrix();
    glTranslatef(0.7f, 0.0f, 0.0f); // Positioned wider for larger legs
    drawBlackMythWukongCharacter(false);
    
    // Position and draw right enhanced heritage combat boot with high contrast
    glPushMatrix();
    glTranslatef(0.0f, 1.6f, 0.0f); // Adjusted for larger character
    glScalef(1.1f, 1.2f, 1.1f); // Slightly larger boots for the mighty Wukong
    drawEnhancedHeritageBootWithContrast(false);
    glPopMatrix();
    glPopMatrix();
}

// Function to draw Wukong-style muscular leg anatomy
void drawWukongMuscularLeg(bool isLeft) {
    glPushMatrix();
    
    if (!isLeft) {
        glScalef(-1.0f, 1.0f, 1.0f);
    }
    
    // Enhanced skin tones for Wukong (golden-brown monkey fur coloring)
    GLfloat wukongSkinColor[] = { 0.85f, 0.7f, 0.45f, 1.0f }; // Golden-brown monkey fur tone
    GLfloat muscleDefinition[] = { 0.75f, 0.6f, 0.35f, 1.0f }; // Darker muscle definition
    
    // --- ENHANCED UPPER THIGH (Much Larger and More Muscular) ---
    glColor3fv(wukongSkinColor);
    
    // Main upper thigh muscle mass
    glPushMatrix();
    glTranslatef(0.0f, 6.2f, 0.0f);
    glScalef(0.85f, 1.4f, 0.85f); // MUCH LARGER - increased for Wukong
    GLUquadric* upperThigh = gluNewQuadric();
    gluSphere(upperThigh, 0.5, 20, 20);
    gluDeleteQuadric(upperThigh);
    glPopMatrix();
    
    // Quadriceps muscle definition
    glColor3fv(muscleDefinition);
    for (int i = 0; i < 3; i++) {
        float angle = (i - 1) * 0.3f;
        glPushMatrix();
        glTranslatef(sinf(angle) * 0.25f, 6.1f, cosf(angle) * 0.15f + 0.2f);
        glScalef(0.15f, 0.6f, 0.2f);
        GLUquadric* quad = gluNewQuadric();
        gluSphere(quad, 0.5, 16, 16);
        gluDeleteQuadric(quad);
        glPopMatrix();
    }
    
    // --- ENHANCED MID THIGH (Larger and More Defined) ---
    glColor3fv(wukongSkinColor);
    glPushMatrix();
    glTranslatef(0.0f, 5.2f, 0.0f);
    glScalef(0.8f, 1.2f, 0.8f); // LARGER - increased for Wukong
    GLUquadric* midThigh = gluNewQuadric();
    gluSphere(midThigh, 0.5, 20, 20);
    gluDeleteQuadric(midThigh);
    glPopMatrix();
    
    // Hamstring muscle definition
    glColor3fv(muscleDefinition);
    glPushMatrix();
    glTranslatef(0.0f, 5.1f, -0.3f);
    glScalef(0.6f, 0.8f, 0.25f);
    GLUquadric* hamstring = gluNewQuadric();
    gluSphere(hamstring, 0.5, 16, 16);
    gluDeleteQuadric(hamstring);
    glPopMatrix();
    
    // --- ENHANCED KNEE AREA ---
    glColor3fv(wukongSkinColor);
    glPushMatrix();
    glTranslatef(0.0f, 4.3f, 0.0f);
    glScalef(0.65f, 0.4f, 0.65f);
    GLUquadric* knee = gluNewQuadric();
    gluSphere(knee, 0.5, 16, 16);
    gluDeleteQuadric(knee);
    glPopMatrix();
    
    // --- ENHANCED CALF MUSCLES (Much More Defined) ---
    glColor3fv(wukongSkinColor);
    
    // Main calf muscle
    glPushMatrix();
    glTranslatef(0.0f, 3.8f, 0.1f);
    glScalef(0.55f, 0.9f, 0.7f); // LARGER calves
    GLUquadric* calf = gluNewQuadric();
    gluSphere(calf, 0.5, 18, 18);
    gluDeleteQuadric(calf);
    glPopMatrix();
    
    // Gastrocnemius muscle definition
    glColor3fv(muscleDefinition);
    glPushMatrix();
    glTranslatef(0.0f, 3.7f, 0.2f);
    glScalef(0.35f, 0.7f, 0.4f);
    GLUquadric* gastrocnemius = gluNewQuadric();
    gluSphere(gastrocnemius, 0.5, 14, 14);
    gluDeleteQuadric(gastrocnemius);
    glPopMatrix();
    
    // Soleus muscle
    glPushMatrix();
    glTranslatef(0.0f, 3.5f, -0.1f);
    glScalef(0.4f, 0.5f, 0.3f);
    GLUquadric* soleus = gluNewQuadric();
    gluSphere(soleus, 0.5, 14, 14);
    gluDeleteQuadric(soleus);
    glPopMatrix();
    
    // --- ENHANCED SHIN AREA ---
    glColor3fv(wukongSkinColor);
    glPushMatrix();
    glTranslatef(0.0f, 3.2f, 0.3f);
    glScalef(0.35f, 0.6f, 0.25f);
    GLUquadric* shin = gluNewQuadric();
    gluSphere(shin, 0.5, 14, 14);
    gluDeleteQuadric(shin);
    glPopMatrix();
    
    glPopMatrix();
}

void setupLighting() {
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
    glEnable(GL_COLOR_MATERIAL);

    GLfloat lightPos0[] = { 4.0f, 5.0f, 6.0f, 1.0f };
    GLfloat lightAmbient0[] = { 0.3f, 0.25f, 0.2f, 1.0f };   // Warmer ambient for heritage look
    GLfloat lightDiffuse0[] = { 0.95f, 0.9f, 0.8f, 1.0f };   // Bright natural light
    GLfloat lightSpecular0[] = { 0.4f, 0.35f, 0.25f, 1.0f }; // Soft specular for leather

    glLightfv(GL_LIGHT0, GL_POSITION, lightPos0);
    glLightfv(GL_LIGHT0, GL_AMBIENT, lightAmbient0);
    glLightfv(GL_LIGHT0, GL_DIFFUSE, lightDiffuse0);
    glLightfv(GL_LIGHT0, GL_SPECULAR, lightSpecular0);

    GLfloat matShininess[] = { 12.0f }; // Lower shininess for authentic leather
    glMaterialfv(GL_FRONT_AND_BACK, GL_SHININESS, matShininess);

    glEnable(GL_NORMALIZE);
    glColorMaterial(GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE);
}

LRESULT WINAPI WindowProcedure(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam) {
    switch (msg) {
    case WM_DESTROY:
        PostQuitMessage(0);
        break;

    case WM_KEYDOWN:
        switch (wParam) {
        case VK_ESCAPE: PostQuitMessage(0); break;
        case VK_LEFT:   rotationY -= 5.0f; break;
        case VK_RIGHT:  rotationY += 5.0f; break;
        case VK_UP:     rotationX -= 5.0f; break;
        case VK_DOWN:   rotationX += 5.0f; break;
        case 'W':       zoom += 0.5f; break;
        case 'S':       zoom -= 0.5f; break;
        }
        break;

    default:
        break;
    }
    return DefWindowProc(hWnd, msg, wParam, lParam);
}

bool initPixelFormat(HDC hdc) {
    PIXELFORMATDESCRIPTOR pfd;
    ZeroMemory(&pfd, sizeof(PIXELFORMATDESCRIPTOR));
    pfd.nSize = sizeof(PIXELFORMATDESCRIPTOR);
    pfd.nVersion = 1;
    pfd.dwFlags = PFD_DRAW_TO_WINDOW | PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER;
    pfd.iPixelType = PFD_TYPE_RGBA;
    pfd.cColorBits = 32;
    pfd.cDepthBits = 24;
    pfd.cStencilBits = 0;
    pfd.iLayerType = PFD_MAIN_PLANE;
    int n = ChoosePixelFormat(hdc, &pfd);
    return SetPixelFormat(hdc, n, &pfd);
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();

    // Camera setup - optimized for detail viewing of the mighty Wukong
    glTranslatef(0.0f, -4.0f, zoom); // Pulled back more to see the larger character
    glRotatef(rotationX, 1.0f, 0.0f, 0.0f);
    glRotatef(rotationY, 0.0f, 1.0f, 0.0f);

    // Draw Wukong's enhanced waist and hip area (more muscular and substantial)
    GLfloat wukongSkinColor[] = { 0.85f, 0.7f, 0.45f, 1.0f }; // Golden-brown Wukong skin
    glColor3fv(wukongSkinColor);
    
    // Enhanced hip area (larger and more muscular for Wukong)
    glPushMatrix();
    glTranslatef(0.0f, 7.2f, 0.0f); // Raised slightly higher
    glScalef(1.0f, 0.8f, 0.7f); // MUCH LARGER - increased for Wukong
    GLUquadric* hip = gluNewQuadric();
    gluSphere(hip, 0.5, 20, 20);
    gluDeleteQuadric(hip);
    glPopMatrix();
    
    // Additional muscle definition around waist
    GLfloat muscleDefinition[] = { 0.75f, 0.6f, 0.35f, 1.0f };
    glColor3fv(muscleDefinition);
    
    // Lower back muscles
    glPushMatrix();
    glTranslatef(0.0f, 7.0f, -0.3f);
    glScalef(0.7f, 0.4f, 0.3f);
    GLUquadric* lowerBack = gluNewQuadric();
    gluSphere(lowerBack, 0.5, 14, 14);
    gluDeleteQuadric(lowerBack);
    glPopMatrix();
    
    // Side oblique muscles
    for (int side = -1; side <= 1; side += 2) {
        glPushMatrix();
        glTranslatef(side * 0.4f, 7.1f, 0.0f);
        glScalef(0.2f, 0.5f, 0.3f);
        GLUquadric* oblique = gluNewQuadric();
        gluSphere(oblique, 0.5, 14, 14);
        gluDeleteQuadric(oblique);
        glPopMatrix();
    }

    // Draw left leg with Black Myth Wukong styling
    glPushMatrix();
    glTranslatef(-0.7f, 0.0f, 0.0f); // Positioned wider for larger legs
    drawBlackMythWukongCharacter(true);
    
    // Position and draw left enhanced heritage combat boot with high contrast
    glPushMatrix();
    glTranslatef(0.0f, 1.6f, 0.0f); // Adjusted for larger character
    glScalef(1.1f, 1.2f, 1.1f); // Slightly larger boots for the mighty Wukong
    drawEnhancedHeritageBootWithContrast(true);
    glPopMatrix();
    glPopMatrix();

    // Draw right leg with Black Myth Wukong styling
    glPushMatrix();
    glTranslatef(0.7f, 0.0f, 0.0f); // Positioned wider for larger legs
    drawBlackMythWukongCharacter(false);
    
    // Position and draw right enhanced heritage combat boot with high contrast
    glPushMatrix();
    glTranslatef(0.0f, 1.6f, 0.0f); // Adjusted for larger character
    glScalef(1.1f, 1.2f, 1.1f); // Slightly larger boots for the mighty Wukong
    drawEnhancedHeritageBootWithContrast(false);
    glPopMatrix();
    glPopMatrix();
}

// Function to draw Wukong-style muscular leg anatomy
void drawWukongMuscularLeg(bool isLeft) {
    glPushMatrix();
    
    if (!isLeft) {
        glScalef(-1.0f, 1.0f, 1.0f);
    }
    
    // Enhanced skin tones for Wukong (golden-brown monkey fur coloring)
    GLfloat wukongSkinColor[] = { 0.85f, 0.7f, 0.45f, 1.0f }; // Golden-brown monkey fur tone
    GLfloat muscleDefinition[] = { 0.75f, 0.6f, 0.35f, 1.0f }; // Darker muscle definition
    
    // --- ENHANCED UPPER THIGH (Much Larger and More Muscular) ---
    glColor3fv(wukongSkinColor);
    
    // Main upper thigh muscle mass
    glPushMatrix();
    glTranslatef(0.0f, 6.2f, 0.0f);
    glScalef(0.85f, 1.4f, 0.85f); // MUCH LARGER - increased for Wukong
    GLUquadric* upperThigh = gluNewQuadric();
    gluSphere(upperThigh, 0.5, 20, 20);
    gluDeleteQuadric(upperThigh);
    glPopMatrix();
    
    // Quadriceps muscle definition
    glColor3fv(muscleDefinition);
    for (int i =  0; i < 3; i++) {
        float angle = (i - 1) * 0.3f;
        glPushMatrix();
        glTranslatef(sinf(angle) * 0.25f, 6.1f, cosf(angle) * 0.15f + 0.2f);
        glScalef(0.15f, 0.6f, 0.2f);
        GLUquadric* quad = gluNewQuadric();
        gluSphere(quad, 0.5, 16, 16);
        gluDeleteQuadric(quad);
        glPopMatrix();
    }
    
    // --- ENHANCED MID THIGH (Larger and More Defined) ---
    glColor3fv(wukongSkinColor);
    glPushMatrix();
    glTranslatef(0.0f, 5.2f, 0.0f);
    glScalef(0.8f, 1.2f, 0.8f); // LARGER - increased for Wukong
    GLUquadric* midThigh = gluNewQuadric();
    gluSphere(midThigh, 0.5, 20, 20);
    gluDeleteQuadric(midThigh);
    glPopMatrix();
    
    // Hamstring muscle definition
    glColor3fv(muscleDefinition);
    glPushMatrix();
    glTranslatef(0.0f, 5.1f, -0.3f);
    glScalef(0.6f, 0.8f, 0.25f);
    GLUquadric* hamstring = gluNewQuadric();
    gluSphere(hamstring, 0.5, 16, 16);
    gluDeleteQuadric(hamstring);
    glPopMatrix();
    
    // --- ENHANCED KNEE AREA ---
    glColor3fv(wukongSkinColor);
    glPushMatrix();
    glTranslatef(0.0f, 4.3f, 0.0f);
    glScalef(0.65f, 0.4f, 0.65f);
    GLUquadric* knee = gluNewQuadric();
    gluSphere(knee, 0.5, 16, 16);
    gluDeleteQuadric(knee);
    glPopMatrix();
    
    // --- ENHANCED CALF MUSCLES (Much More Defined) ---
    glColor3fv(wukongSkinColor);
    
    // Main calf muscle
    glPushMatrix();
    glTranslatef(0.0f, 3.8f, 0.1f);
    glScalef(0.55f, 0.9f, 0.7f); // LARGER calves
    GLUquadric* calf = gluNewQuadric();
    gluSphere(calf, 0.5, 18, 18);
    gluDeleteQuadric(calf);
    glPopMatrix();
    
    // Gastrocnemius muscle definition
    glColor3fv(muscleDefinition);
    glPushMatrix();
    glTranslatef(0.0f, 3.7f, 0.2f);
    glScalef(0.35f, 0.7f, 0.4f);
    GLUquadric* gastrocnemius = gluNewQuadric();
    gluSphere(gastrocnemius, 0.5, 14, 14);
    gluDeleteQuadric(gastrocnemius);
    glPopMatrix();
    
    // Soleus muscle
    glPushMatrix();
    glTranslatef(0.0f, 3.5f, -0.1f);
    glScalef(0.4f, 0.5f, 0.3f);
    GLUquadric* soleus = gluNewQuadric();
    gluSphere(soleus, 0.5, 14, 14);
    gluDeleteQuadric(soleus);
    glPopMatrix();
    
    // --- ENHANCED SHIN AREA ---
    glColor3fv(wukongSkinColor);
    glPushMatrix();
    glTranslatef(0.0f, 3.2f, 0.3f);
    glScalef(0.35f, 0.6f, 0.25f);
    GLUquadric* shin = gluNewQuadric();
    gluSphere(shin, 0.5, 14, 14);
    gluDeleteQuadric(shin);
    glPopMatrix();
    
    glPopMatrix();
}

// --- APPLICATION FRAMEWORK (No changes needed below this line) ---

void setupLighting() {
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
    glEnable(GL_COLOR_MATERIAL);

    GLfloat lightPos0[] = { 4.0f, 5.0f, 6.0f, 1.0f };
    GLfloat lightAmbient0[] = { 0.3f, 0.25f, 0.2f, 1.0f };   // Warmer ambient for heritage look
    GLfloat lightDiffuse0[] = { 0.95f, 0.9f, 0.8f, 1.0f };   // Bright natural light
    GLfloat lightSpecular0[] = { 0.4f, 0.35f, 0.25f, 1.0f }; // Soft specular for leather

    glLightfv(GL_LIGHT0, GL_POSITION, lightPos0);
    glLightfv(GL_LIGHT0, GL_AMBIENT, lightAmbient0);
    glLightfv(GL_LIGHT0, GL_DIFFUSE, lightDiffuse0);
    glLightfv(GL_LIGHT0, GL_SPECULAR, lightSpecular0);

    GLfloat matShininess[] = { 12.0f }; // Lower shininess for authentic leather
    glMaterialfv(GL_FRONT_AND_BACK, GL_SHININESS, matShininess);

    glEnable(GL_NORMALIZE);
    glColorMaterial(GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE);
}

LRESULT WINAPI WindowProcedure(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam) {
    switch (msg) {
    case WM_DESTROY:
        PostQuitMessage(0);
        break;

    case WM_KEYDOWN:
        switch (wParam) {
        case VK_ESCAPE: PostQuitMessage(0); break;
        case VK_LEFT:   rotationY -= 5.0f; break;
        case VK_RIGHT:  rotationY += 5.0f; break;
        case VK_UP:     rotationX -= 5.0f; break;
        case VK_DOWN:   rotationX += 5.0f; break;
        case 'W':       zoom += 0.5f; break;
        case 'S':       zoom -= 0.5f; break;
        }
        break;

    default:
        break;
    }
    return DefWindowProc(hWnd, msg, wParam, lParam);
}

bool initPixelFormat(HDC hdc) {
    PIXELFORMATDESCRIPTOR pfd;
    ZeroMemory(&pfd, sizeof(PIXELFORMATDESCRIPTOR));
    pfd.nSize = sizeof(PIXELFORMATDESCRIPTOR);
    pfd.nVersion = 1;
    pfd.dwFlags = PFD_DRAW_TO_WINDOW | PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER;
    pfd.iPixelType = PFD_TYPE_RGBA;
    pfd.cColorBits = 32;
    pfd.cDepthBits = 24;
    pfd.cStencilBits = 0;
    pfd.iLayerType = PFD_MAIN_PLANE;
    int n = ChoosePixelFormat(hdc, &pfd);
    return SetPixelFormat(hdc, n, &pfd);
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();

    // Camera setup - optimized for detail viewing of the mighty Wukong
    glTranslatef(0.0f, -4.0f, zoom); // Pulled back more to see the larger character
    glRotatef(rotationX, 1.0f, 0.0f, 0.0f);
    glRotatef(rotationY, 0.0f, 1.0f, 0.0f);

    // Draw Wukong's enhanced waist and hip area (more muscular and substantial)
    GLfloat wukongSkinColor[] = { 0.85f, 0.7f, 0.45f, 1.0f }; // Golden-brown Wukong skin
    glColor3fv(wukongSkinColor);
    
    // Enhanced hip area (larger and more muscular for Wukong)
    glPushMatrix();
    glTranslatef(0.0f, 7.2f, 0.0f); // Raised slightly higher
    glScalef(1.0f, 0.8f, 0.7f); // MUCH LARGER - increased for Wukong
    GLUquadric* hip = gluNewQuadric();
    gluSphere(hip, 0.5, 20, 20);
    gluDeleteQuadric(hip);
    glPopMatrix();
    
    // Additional muscle definition around waist
    GLfloat muscleDefinition[] = { 0.75f, 0.6f, 0.35f, 1.0f };
    glColor3fv(muscleDefinition);
    
    // Lower back muscles
    glPushMatrix();
    glTranslatef(0.0f, 7.0f, -0.3f);
    glScalef(0.7f, 0.4f, 0.3f);
    GLUquadric* lowerBack = gluNewQuadric();
    gluSphere(lowerBack, 0.5, 14, 14);
    gluDeleteQuadric(lowerBack);
    glPopMatrix();
    
    // Side oblique muscles
    for (int side = -1; side <= 1; side += 2) {
        glPushMatrix();
        glTranslatef(side * 0.4f, 7.1f, 0.0f);
        glScalef(0.2f, 0.5f, 0.3f);
        GLUquadric* oblique = gluNewQuadric();
        gluSphere(oblique, 0.5, 14, 14);
        gluDeleteQuadric(oblique);
        glPopMatrix();
    }

    // Draw left leg with Black Myth Wukong styling
    glPushMatrix();
    glTranslatef(-0.7f, 0.0f, 0.0f); // Positioned wider for larger legs
    drawBlackMythWukongCharacter(true);
    
    // Position and draw left enhanced heritage combat boot with high contrast
    glPushMatrix();
    glTranslatef(0.0f, 1.6f, 0.0f); // Adjusted for larger character
    glScalef(1.1f, 1.2f, 1.1f); // Slightly larger boots for the mighty Wukong
    drawEnhancedHeritageBootWithContrast(true);
    glPopMatrix();
    glPopMatrix();

    // Draw right leg with Black Myth Wukong styling
    glPushMatrix();
    glTranslatef(0.7f, 0.0f, 0.0f); // Positioned wider for larger legs
    drawBlackMythWukongCharacter(false);
    
    // Position and draw right enhanced heritage combat boot with high contrast
    glPushMatrix();
    glTranslatef(0.0f, 1.6f, 0.0f); // Adjusted for larger character
    glScalef(1.1f, 1.2f, 1.1f); // Slightly larger boots for the mighty Wukong
    drawEnhancedHeritageBootWithContrast(false);
    glPopMatrix();
    glPopMatrix();
}

// --- APPLICATION FRAMEWORK (No changes needed below this line) ---

void setupLighting() {
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
    glEnable(GL_COLOR_MATERIAL);

    GLfloat lightPos0[] = { 4.0f, 5.0f, 6.0f, 1.0f };
    GLfloat lightAmbient0[] = { 0.3f, 0.25f, 0.2f, 1.0f };   // Warmer ambient for heritage look
    GLfloat lightDiffuse0[] = { 0.95f, 0.9f, 0.8f, 1.0f };   // Bright natural light
    GLfloat lightSpecular0[] = { 0.4f, 0.35f, 0.25f, 1.0f }; // Soft specular for leather

    glLightfv(GL_LIGHT0, GL_POSITION, lightPos0);
    glLightfv(GL_LIGHT0, GL_AMBIENT, lightAmbient0);
    glLightfv(GL_LIGHT0, GL_DIFFUSE, lightDiffuse0);
    glLightfv(GL_LIGHT0, GL_SPECULAR, lightSpecular0);

    GLfloat matShininess[] = { 12.0f }; // Lower shininess for authentic leather
    glMaterialfv(GL_FRONT_AND_BACK, GL_SHININESS, matShininess);

    glEnable(GL_NORMALIZE);
    glColorMaterial(GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE);
}

LRESULT WINAPI WindowProcedure(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam) {
    switch (msg) {
    case WM_DESTROY:
        PostQuitMessage(0);
        break;

    case WM_KEYDOWN:
        switch (wParam) {
        case VK_ESCAPE: PostQuitMessage(0); break;
        case VK_LEFT:   rotationY -= 5.0f; break;
        case VK_RIGHT:  rotationY += 5.0f; break;
        case VK_UP:     rotationX -= 5.0f; break;
        case VK_DOWN:   rotationX += 5.0f; break;
        case 'W':       zoom += 0.5f; break;
        case 'S':       zoom -= 0.5f; break;
        }
        break;

    default:
        break;
    }
    return DefWindowProc(hWnd, msg, wParam, lParam);
}

bool initPixelFormat(HDC hdc) {
    PIXELFORMATDESCRIPTOR pfd;
    ZeroMemory(&pfd, sizeof(PIXELFORMATDESCRIPTOR));
    pfd.nSize = sizeof(PIXELFORMATDESCRIPTOR);
    pfd.nVersion = 1;
    pfd.dwFlags = PFD_DRAW_TO_WINDOW | PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER;
    pfd.iPixelType = PFD_TYPE_RGBA;
    pfd.cColorBits = 32;
    pfd.cDepthBits = 24;
    pfd.cStencilBits = 0;
    pfd.iLayerType = PFD_MAIN_PLANE;
    int n = ChoosePixelFormat(hdc, &pfd);
    return SetPixelFormat(hdc, n, &pfd);
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();

    // Camera setup - optimized for detail viewing of the mighty Wukong
    glTranslatef(0.0f, -4.0f, zoom); // Pulled back more to see the larger character
    glRotatef(rotationX, 1.0f, 0.0f, 0.0f);
    glRotatef(rotationY, 0.0f, 1.0f, 0.0f);

    // Draw Wukong's enhanced waist and hip area (more muscular and substantial)
    GLfloat wukongSkinColor[] = { 0.85f, 0.7f, 0.45f, 1.0f }; // Golden-brown Wukong skin
    glColor3fv(wukongSkinColor);
    
    // Enhanced hip area (larger and more muscular for Wukong)
    glPushMatrix();
    glTranslatef(0.0f, 7.2f, 0.0f); // Raised slightly higher
    glScalef(1.0f, 0.8f, 0.7f); // MUCH LARGER - increased for Wukong
    GLUquadric* hip = gluNewQuadric();
    gluSphere(hip, 0.5, 20, 20);
    gluDeleteQuadric(hip);
    glPopMatrix();
    
    // Additional muscle definition around waist
    GLfloat muscleDefinition[] = { 0.75f, 0.6f, 0.35f, 1.0f };
    glColor3fv(muscleDefinition);
    
    // Lower back muscles
    glPushMatrix();
    glTranslatef(0.0f, 7.0f, -0.3f);
    glScalef(0.7f, 0.4f, 0.3f);
    GLUquadric* lowerBack = gluNewQuadric();
    gluSphere(lowerBack, 0.5, 14, 14);
    gluDeleteQuadric(lowerBack);
    glPopMatrix();
    
    // Side oblique muscles
    for (int side = -1; side <= 1; side += 2) {
        glPushMatrix();
        glTranslatef(side * 0.4f, 7.1f, 0.0f);
        glScalef(0.2f, 0.5f, 0.3f);
        GLUquadric* oblique = gluNewQuadric();
        gluSphere(oblique, 0.5, 14, 14);
        gluDeleteQuadric(oblique);
        glPopMatrix();
    }

    // Draw left leg with Black Myth Wukong styling
    glPushMatrix();
    glTranslatef(-0.7f, 0.0f, 0.0f); // Positioned wider for larger legs
    drawBlackMythWukongCharacter(true);
    
    // Position and draw left enhanced heritage combat boot with high contrast
    glPushMatrix();
    glTranslatef(0.0f, 1.6f, 0.0f); // Adjusted for larger character
    glScalef(1.1f, 1.2f, 1.1f); // Slightly larger boots for the mighty Wukong
    drawEnhancedHeritageBootWithContrast(true);
    glPopMatrix();
    glPopMatrix();

    // Draw right leg with Black Myth Wukong styling
    glPushMatrix();
    glTranslatef(0.7f, 0.0f, 0.0f); // Positioned wider for larger legs
    drawBlackMythWukongCharacter(false);
    
    // Position and draw right enhanced heritage combat boot with high contrast
    glPushMatrix();
    glTranslatef(0.0f, 1.6f, 0.0f); // Adjusted for larger character
    glScalef(1.1f, 1.2f, 1.1f); // Slightly larger boots for the mighty Wukong
    drawEnhancedHeritageBootWithContrast(false);
    glPopMatrix();
    glPopMatrix();
}

// --- APPLICATION FRAMEWORK (No changes needed below this line) ---

void setupLighting() {
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
    glEnable(GL_COLOR_MATERIAL);

    GLfloat lightPos0[] = { 4.0f, 5.0f, 6.0f, 1.0f };
    GLfloat lightAmbient0[] = { 0.3f, 0.25f, 0.2f, 1.0f };   // Warmer ambient for heritage look
    GLfloat lightDiffuse0[] = { 0.95f, 0.9f, 0.8f, 1.0f };   // Bright natural light
    GLfloat lightSpecular0[] = { 0.4f, 0.35f, 0.25f, 1.0f }; // Soft specular for leather

    glLightfv(GL_LIGHT0, GL_POSITION, lightPos0);
    glLightfv(GL_LIGHT0, GL_AMBIENT, lightAmbient0);
    glLightfv(GL_LIGHT0, GL_DIFFUSE, lightDiffuse0);
    glLightfv(GL_LIGHT0, GL_SPECULAR, lightSpecular0);

    GLfloat matShininess[] = { 12.0f }; // Lower shininess for authentic leather
    glMaterialfv(GL_FRONT_AND_BACK, GL_SHININESS, matShininess);

    glEnable(GL_NORMALIZE);
    glColorMaterial(GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE);
}

LRESULT WINAPI WindowProcedure(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam) {
    switch (msg) {
    case WM_DESTROY:
        PostQuitMessage(0);
        break;

    case WM_KEYDOWN:
        switch (wParam) {
        case VK_ESCAPE: PostQuitMessage(0); break;
        case VK_LEFT:   rotationY -= 5.0f; break;
        case VK_RIGHT:  rotationY += 5.0f; break;
        case VK_UP:     rotationX -= 5.0f; break;
        case VK_DOWN:   rotationX += 5.0f; break;
        case 'W':       zoom += 0.5f; break;
        case 'S':       zoom -= 0.5f; break;
        }
        break;

    default:
        break;
    }
    return DefWindowProc(hWnd, msg, wParam, lParam);
}

bool initPixelFormat(HDC hdc) {
    PIXELFORMATDESCRIPTOR pfd;
    ZeroMemory(&pfd, sizeof(PIXELFORMATDESCRIPTOR));
    pfd.nSize = sizeof(PIXELFORMATDESCRIPTOR);
    pfd.nVersion = 1;
    pfd.dwFlags = PFD_DRAW_TO_WINDOW | PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER;
    pfd.iPixelType = PFD_TYPE_RGBA;
    pfd.cColorBits = 32;
    pfd.cDepthBits = 24;
    pfd.cStencilBits = 0;
    pfd.iLayerType = PFD_MAIN_PLANE;
    int n = ChoosePixelFormat(hdc, &pfd);
    return SetPixelFormat(hdc, n, &pfd);
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();

    // Camera setup - optimized for detail viewing of the mighty Wukong
    glTranslatef(0.0f, -4.0f, zoom); // Pulled back more to see the larger character
    glRotatef(rotationX, 1.0f, 0.0f, 0.0f);
    glRotatef(rotationY, 0.0f, 1.0f, 0.0f);

    // Draw Wukong's enhanced waist and hip area (more muscular and substantial)
    GLfloat wukongSkinColor[] = { 0.85f, 0.7f, 0.45f, 1.0f }; // Golden-brown Wukong skin
    glColor3fv(wukongSkinColor);
    
    // Enhanced hip area (larger and more muscular for Wukong)
    glPushMatrix();
    glTranslatef(0.0f, 7.2f, 0.0f); // Raised slightly higher
    glScalef(1.0f, 0.8f, 0.7f); // MUCH LARGER - increased for Wukong
    GLUquadric* hip = gluNewQuadric();
    gluSphere(hip, 0.5, 20, 20);
    gluDeleteQuadric(hip);
    glPopMatrix();
    
    // Additional muscle definition around waist
    GLfloat muscleDefinition[] = { 0.75f, 0.6f, 0.35f, 1.0f };
    glColor3fv(muscleDefinition);
    
    // Lower back muscles
    glPushMatrix();
    glTranslatef(0.0f, 7.0f, -0.3f);
    glScalef(0.7f, 0.4f, 0.3f);
    GLUquadric* lowerBack = gluNewQuadric();
    gluSphere(lowerBack, 0.5, 14, 14);
    gluDeleteQuadric(lowerBack);
    glPopMatrix();
    
    // Side oblique muscles
    for (int side = -1; side <= 1; side += 2) {
        glPushMatrix();
        glTranslatef(side * 0.4f, 7.1f, 0.0f);
        glScalef(0.2f, 0.5f, 0.3f);
        GLUquadric* oblique = gluNewQuadric();
        gluSphere(oblique, 0.5, 14, 14);
        gluDeleteQuadric(oblique);
        glPopMatrix();
    }

    // Draw left leg with Black Myth Wukong styling
    glPushMatrix();
    glTranslatef(-0.7f, 0.0f, 0.0f); // Positioned wider for larger legs
    drawBlackMythWukongCharacter(true);
    
    // Position and draw left enhanced heritage combat boot with high contrast
    glPushMatrix();
    glTranslatef(0.0f, 1.6f, 0.0f); // Adjusted for larger character
    glScalef(1.1f, 1.2f, 1.1f); // Slightly larger boots for the mighty Wukong
    drawEnhancedHeritageBootWithContrast(true);
    glPopMatrix();
    glPopMatrix();

    // Draw right leg with Black Myth Wukong styling
    glPushMatrix();
    glTranslatef(0.7f, 0.0f, 0.0f); // Positioned wider for larger legs
    drawBlackMythWukongCharacter(false);
    
    // Position and draw right enhanced heritage combat boot with high contrast
    glPushMatrix();
    glTranslatef(0.0f, 1.6f, 0.0f); // Adjusted for larger character
    glScalef(1.1f, 1.2f, 1.1f); // Slightly larger boots for the mighty Wukong
    drawEnhancedHeritageBootWithContrast(false);
    glPopMatrix();
    glPopMatrix();
}

// --- APPLICATION FRAMEWORK (No changes needed below this line) ---

void setupLighting() {
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
    glEnable(GL_COLOR_MATERIAL);

    GLfloat lightPos0[] = { 4.0f, 5.0f, 6.0f, 1.0f };
    GLfloat lightAmbient0[] = { 0.3f, 0.25f, 0.2f, 1.0f };   // Warmer ambient for heritage look
    GLfloat lightDiffuse0[] = { 0.95f, 0.9f, 0.8f, 1.0f };   // Bright natural light
    GLfloat lightSpecular0[] = { 0.4f, 0.35f, 0.25f, 1.0f }; // Soft specular for leather

    glLightfv(GL_LIGHT0, GL_POSITION, lightPos0);
    glLightfv(GL_LIGHT0, GL_AMBIENT, lightAmbient0);
    glLightfv(GL_LIGHT0, GL_DIFFUSE, lightDiffuse0);
    glLightfv(GL_LIGHT0, GL_SPECULAR, lightSpecular0);

    GLfloat matShininess[] = { 12.0f }; // Lower shininess for authentic leather
    glMaterialfv(GL_FRONT_AND_BACK, GL_SHININESS, matShininess);

    glEnable(GL_NORMALIZE);
    glColorMaterial(GL_FRONT_AND_BACK, GL_AMBIENT_AND_DIFFUSE);
}

LRESULT WINAPI WindowProcedure(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam) {
    switch (msg) {
    case WM_DESTROY:
        PostQuitMessage(0);
        break;

    case WM_KEYDOWN:
        switch (wParam) {
        case VK_ESCAPE: PostQuitMessage(0); break;
        case VK_LEFT:   rotationY -= 5.0f; break;
        case VK_RIGHT:  rotationY += 5.0f; break;
        case VK_UP:     rotationX -= 5.0f; break;
        case VK_DOWN:   rotationX += 5.0f; break;
        case 'W':       zoom += 0.5f; break;
        case 'S':       zoom -= 0.5f; break;
        }
        break;

    default:
        break;
    }
    return DefWindowProc(hWnd, msg, wParam, lParam);
}

bool initPixelFormat(HDC hdc) {
    PIXELFORMATDESCRIPTOR pfd;
    ZeroMemory(&pfd, sizeof(PIXELFORMATDESCRIPTOR));
    pfd.nSize = sizeof(PIXELFORMATDESCRIPTOR);
    pfd.nVersion = 1;
    pfd.dwFlags = PFD_DRAW_TO_WINDOW | PFD_SUPPORT_OPENGL | PFD_DOUBLEBUFFER;
    pfd.iPixelType = PFD_TYPE_RGBA;
    pfd.cColorBits = 32;
    pfd.cDepthBits = 24;
    pfd.cStencilBits = 0;
    pfd.iLayerType = PFD_MAIN_PLANE;
    int n = ChoosePixelFormat(hdc, &pfd);
    return SetPixelFormat(hdc, n, &pfd);
}

void display() {
    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();

    // Camera setup - optimized for detail viewing of the mighty Wukong
    glTranslatef(0.0f, -4.0f, zoom); // Pulled back more to see the larger character
    glRotatef(rotationX, 1.0f, 0.0f, 0.0f);
    glRotatef(rotationY, 0.0f, 1.0f, 0.0f);

    // Draw Wukong's enhanced waist and hip area (more muscular and substantial)
    GLfloat wukongSkinColor[] = { 0.85f, 0.7f, 0.45f, 1.0f }; // Golden-brown Wukong skin
    glColor3fv(wukongSkinColor);
    
    // Enhanced hip area (larger and more muscular for Wukong)
    glPushMatrix();
    glTranslatef(0.0f, 7.2f, 0.0f); // Raised slightly higher
    glScalef(1.0f, 0.8f, 0.7f); // MUCH LARGER - increased for Wukong
    GLUquadric* hip = gluNewQuadric();
    gluSphere(hip, 0.5, 20, 20);
    gluDeleteQuadric(hip);
    glPopMatrix();
    
    // Additional muscle definition around waist
    GLfloat muscleDefinition[] = { 0.75f, 0.6f, 0.35f, 1.0f };
    glColor3fv(muscleDefinition);
    
    // Lower back muscles
    glPushMatrix();
    glTranslatef(0.0f, 7.0f, -0.3f);
    glScalef(0.7f, 0.4f, 0.3f);
    GLUquadric* lowerBack = gluNewQuadric();
    gluSphere(lowerBack, 0.5, 14, 14);
    gluDeleteQuadric(lowerBack);
    glPopMatrix();
    
    // Side oblique muscles
    for (int side = -1; side <= 1; side += 2) {
        glPushMatrix();
        glTranslatef(side * 0.4f, 7.1f, 0.0f);
        glScalef(0.2f, 0.5f, 0.3f);
        GLUquadric* oblique = gluNewQuadric();
        gluSphere(oblique, 0.5, 14, 14);
        gluDeleteQuadric(oblique);
        glPopMatrix();
    }

    // Draw left leg with Black Myth Wukong styling
    glPushMatrix();
    glTranslatef(-0.7f, 0.0f, 0.0f); // Positioned wider for larger legs
    drawBlackMythWukongCharacter(true);
    
    // Position and draw left enhanced heritage combat boot with high contrast
    glPushMatrix();
    glTranslatef(0.0f, 1.6f, 0.0f); // Adjusted for larger character
    glScalef(1.1f, 1.2f, 1.1f); // Slightly larger boots for the mighty Wukong
    drawEnhancedHeritageBootWithContrast(true);
    glPopMatrix();
    glPopMatrix();

    // Draw right leg with Black Myth Wukong styling
    glPushMatrix();
    glTranslatef(0.7f, 0.0f, 0.0f); // Positioned wider for larger legs
    drawBlackMythWukongCharacter(false);
    
    // Position and draw right enhanced heritage combat boot with high contrast
    glPushMatrix();
    glTranslatef(0.0f, 1.6f, 0.0f); // Adjusted for larger character
    glScalef(1.1f, 1.2f, 1.1f); // Slightly larger boots for the mighty Wukong
    drawEnhancedHeritageBootWithContrast(false);
    glPopMatrix();
    glPopMatrix();
}